Hashing and Secure Password Storage

===
Hash Functions in Security:

Hash functions are vital for security, used in authentication and non-repudiation.

They convert data into an irreversible code for integrity verification.

===
Origins of Hashing:

Hash functions date back to early computing for efficient data retrieval.

MD5 (Message Digest 5) was an early hash function created by MIT's Ronald Rivest.

===
Hash Collision Challenge:

Hash functions map any input to a fixed-size output.

Limited output size leads to a risk of hash collisions (different inputs producing the same hash).

Note: check the document related to this topic for further informations.

===
NIST Approval:

NIST (National Institute of Standards and Technology) approves these algorithms.

Each SHA function is identified by a number indicating the size of its hash value in bits.

===
Except for SHA-1 (160-bit digest), these algorithms are considered collision-resistant but not immune to other attacks.
The SHA Family:

SHA-1
SHA-224
SHA-256
SHA-384
SHA-512

Note: While these algorithms offer improved collision resistance, they may still have vulnerabilities that need to be addressed.

===
Rainbow Tables:

Rainbow tables are a type of tool used by attackers to crack hashed passwords more efficiently.

These tables are essentially databases of precomputed hash values and their associated plaintext inputs.

Attackers use rainbow tables to quickly match hashed passwords in a stolen or compromised database to their plaintext counterparts.

This significantly speeds up the process of password cracking because they don't need to compute hash values for every possible password during an attack.

===
Salting as a Countermeasure to rainbow:

To defend against rainbow table attacks, a security practice called "salting" is employed.

Salting involves adding a unique random string of characters (the salt) to each password before hashing it.

The salt effectively modifies the password, ensuring that even if two users have the same password, their hashed values will be different due to the unique salts.

This makes it impractical for attackers to precompute rainbow tables for all possible salts, as there are too many combinations.

Salting adds an extra layer of security and complexity to password storage, making it significantly more challenging for attackers to crack hashed passwords, even if they have access to the hash values and the salt used.

===






